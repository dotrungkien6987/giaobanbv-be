/**
 * Migration Script: Seed d·ªØ li·ªáu m·∫´u cho h·ªá th·ªëng KPI
 *
 * Ch·∫°y script n√†y ƒë·ªÉ t·∫°o d·ªØ li·ªáu m·∫´u cho:
 * - TieuChiDanhGia (Ti√™u ch√≠ ƒë√°nh gi√°)
 * - ChuKyDanhGia (Chu k·ª≥ ƒë√°nh gi√°)
 *
 * Usage: node migrations/seedKPIData.js
 */

const mongoose = require("mongoose");
require("dotenv").config();

// Import models
const TieuChiDanhGia = require("../models/TieuChiDanhGia");
const ChuKyDanhGia = require("../models/ChuKyDanhGia");

// K·∫øt n·ªëi database
const connectDB = async () => {
  try {
    await mongoose.connect(
      process.env.MONGODB_URI || "mongodb://localhost:27017/giaobanbv",
      {
        useNewUrlParser: true,
        useUnifiedTopology: true,
      }
    );
    console.log("‚úÖ ƒê√£ k·∫øt n·ªëi database");
  } catch (error) {
    console.error("‚ùå L·ªói k·∫øt n·ªëi database:", error);
    process.exit(1);
  }
};

// D·ªØ li·ªáu m·∫´u ti√™u ch√≠ ƒë√°nh gi√°
const tieuChiMau = [
  // Ti√™u ch√≠ tƒÉng ƒëi·ªÉm
  {
    TenTieuChi: "Ho√†n th√†nh ƒë√∫ng h·∫°n",
    MoTa: "Ph·∫ßn trƒÉm c√¥ng vi·ªác ho√†n th√†nh ƒë√∫ng ho·∫∑c tr∆∞·ªõc th·ªùi h·∫°n",
    LoaiTieuChi: "TANG_DIEM",
    GiaTriMin: 0,
    GiaTriMax: 100,
    TrongSoMacDinh: 1.0,
    TrangThaiHoatDong: true,
  },
  {
    TenTieuChi: "Ch·∫•t l∆∞·ª£ng c√¥ng vi·ªác",
    MoTa: "ƒê√°nh gi√° ch·∫•t l∆∞·ª£ng ho√†n th√†nh c√¥ng vi·ªác",
    LoaiTieuChi: "TANG_DIEM",
    GiaTriMin: 0,
    GiaTriMax: 100,
    TrongSoMacDinh: 1.2,
    TrangThaiHoatDong: true,
  },
  {
    TenTieuChi: "S√°ng ki·∫øn c·∫£i ti·∫øn",
    MoTa: "S·ªë s√°ng ki·∫øn c·∫£i ti·∫øn quy tr√¨nh ƒë√£ ƒë·ªÅ xu·∫•t",
    LoaiTieuChi: "TANG_DIEM",
    GiaTriMin: 0,
    GiaTriMax: 10,
    TrongSoMacDinh: 0.5,
    TrangThaiHoatDong: true,
  },
  {
    TenTieuChi: "H·ªó tr·ª£ ƒë·ªìng nghi·ªáp",
    MoTa: "M·ª©c ƒë·ªô h·ªó tr·ª£ v√† chia s·∫ª kinh nghi·ªám v·ªõi ƒë·ªìng nghi·ªáp",
    LoaiTieuChi: "TANG_DIEM",
    GiaTriMin: 0,
    GiaTriMax: 100,
    TrongSoMacDinh: 0.8,
    TrangThaiHoatDong: true,
  },
  {
    TenTieuChi: "Tu√¢n th·ªß quy tr√¨nh",
    MoTa: "M·ª©c ƒë·ªô tu√¢n th·ªß quy tr√¨nh l√†m vi·ªác c·ªßa ƒë∆°n v·ªã",
    LoaiTieuChi: "TANG_DIEM",
    GiaTriMin: 0,
    GiaTriMax: 100,
    TrongSoMacDinh: 1.0,
    TrangThaiHoatDong: true,
  },

  // Ti√™u ch√≠ gi·∫£m ƒëi·ªÉm
  {
    TenTieuChi: "Tr·ªÖ deadline",
    MoTa: "S·ªë l·∫ßn tr·ªÖ deadline trong k·ª≥ ƒë√°nh gi√°",
    LoaiTieuChi: "GIAM_DIEM",
    GiaTriMin: 0,
    GiaTriMax: 10,
    TrongSoMacDinh: 1.0,
    TrangThaiHoatDong: true,
  },
  {
    TenTieuChi: "Sai s√≥t c√¥ng vi·ªác",
    MoTa: "S·ªë l·∫ßn ph√°t hi·ªán sai s√≥t c·∫ßn s·ª≠a ch·ªØa",
    LoaiTieuChi: "GIAM_DIEM",
    GiaTriMin: 0,
    GiaTriMax: 10,
    TrongSoMacDinh: 1.2,
    TrangThaiHoatDong: true,
  },
  {
    TenTieuChi: "Vi ph·∫°m n·ªôi quy",
    MoTa: "S·ªë l·∫ßn vi ph·∫°m n·ªôi quy l√†m vi·ªác",
    LoaiTieuChi: "GIAM_DIEM",
    GiaTriMin: 0,
    GiaTriMax: 5,
    TrongSoMacDinh: 2.0,
    TrangThaiHoatDong: true,
  },
];

// D·ªØ li·ªáu m·∫´u chu k·ª≥ ƒë√°nh gi√°
const chuKyMau = [
  {
    TenChuKy: "ƒê√°nh gi√° KPI th√°ng 10/2025",
    LoaiChuKy: "HANG_THANG",
    NgayBatDau: new Date("2025-10-01"),
    NgayKetThuc: new Date("2025-10-31"),
    TrangThai: "DANG_HOAT_DONG",
    MoTa: "Chu k·ª≥ ƒë√°nh gi√° KPI th√°ng 10 nƒÉm 2025",
  },
  {
    TenChuKy: "ƒê√°nh gi√° KPI Qu√Ω 3/2025",
    LoaiChuKy: "QUY",
    NgayBatDau: new Date("2025-07-01"),
    NgayKetThuc: new Date("2025-09-30"),
    TrangThai: "HOAN_THANH",
    MoTa: "Chu k·ª≥ ƒë√°nh gi√° KPI qu√Ω 3 nƒÉm 2025",
  },
  {
    TenChuKy: "ƒê√°nh gi√° KPI th√°ng 11/2025",
    LoaiChuKy: "HANG_THANG",
    NgayBatDau: new Date("2025-11-01"),
    NgayKetThuc: new Date("2025-11-30"),
    TrangThai: "CHUAN_BI",
    MoTa: "Chu k·ª≥ ƒë√°nh gi√° KPI th√°ng 11 nƒÉm 2025",
  },
];

// H√†m seed d·ªØ li·ªáu
const seedData = async () => {
  try {
    console.log("üöÄ B·∫Øt ƒë·∫ßu seed d·ªØ li·ªáu KPI...\n");

    // 1. X√≥a d·ªØ li·ªáu c≈© (n·∫øu c√≥)
    console.log("üóëÔ∏è  X√≥a d·ªØ li·ªáu c≈©...");
    await TieuChiDanhGia.deleteMany({});
    await ChuKyDanhGia.deleteMany({});
    console.log("‚úÖ ƒê√£ x√≥a d·ªØ li·ªáu c≈©\n");

    // 2. Seed ti√™u ch√≠ ƒë√°nh gi√°
    console.log("üìù Seed ti√™u ch√≠ ƒë√°nh gi√°...");
    const tieuChiCreated = await TieuChiDanhGia.insertMany(tieuChiMau);
    console.log(`‚úÖ ƒê√£ t·∫°o ${tieuChiCreated.length} ti√™u ch√≠ ƒë√°nh gi√°:`);
    tieuChiCreated.forEach((tc, index) => {
      console.log(
        `   ${index + 1}. [${tc.LoaiTieuChi}] ${tc.TenTieuChi} (${
          tc.GiaTriMin
        }-${tc.GiaTriMax})`
      );
    });
    console.log();

    // 3. Seed chu k·ª≥ ƒë√°nh gi√°
    console.log("üìÖ Seed chu k·ª≥ ƒë√°nh gi√°...");
    const chuKyCreated = await ChuKyDanhGia.insertMany(chuKyMau);
    console.log(`‚úÖ ƒê√£ t·∫°o ${chuKyCreated.length} chu k·ª≥ ƒë√°nh gi√°:`);
    chuKyCreated.forEach((ck, index) => {
      const from = ck.NgayBatDau.toLocaleDateString("vi-VN");
      const to = ck.NgayKetThuc.toLocaleDateString("vi-VN");
      console.log(
        `   ${index + 1}. ${ck.TenChuKy} (${from} - ${to}) - ${ck.TrangThai}`
      );
    });
    console.log();

    // 4. Th·ªëng k√™
    console.log("üìä Th·ªëng k√™ d·ªØ li·ªáu:");
    console.log(
      `   - Ti√™u ch√≠ TƒÇNG ƒêI·ªÇM: ${
        tieuChiCreated.filter((tc) => tc.LoaiTieuChi === "TANG_DIEM").length
      }`
    );
    console.log(
      `   - Ti√™u ch√≠ GI·∫¢M ƒêI·ªÇM: ${
        tieuChiCreated.filter((tc) => tc.LoaiTieuChi === "GIAM_DIEM").length
      }`
    );
    console.log(
      `   - Chu k·ª≥ ƒêANG HO·∫†T ƒê·ªòNG: ${
        chuKyCreated.filter((ck) => ck.TrangThai === "DANG_HOAT_DONG").length
      }`
    );
    console.log(
      `   - Chu k·ª≥ CHU·∫®N B·ªä: ${
        chuKyCreated.filter((ck) => ck.TrangThai === "CHUAN_BI").length
      }`
    );
    console.log(
      `   - Chu k·ª≥ HO√ÄN TH√ÄNH: ${
        chuKyCreated.filter((ck) => ck.TrangThai === "HOAN_THANH").length
      }`
    );
    console.log();

    console.log("‚úÖ Seed d·ªØ li·ªáu KPI th√†nh c√¥ng!");
    console.log("\nüí° B∆∞·ªõc ti·∫øp theo:");
    console.log(
      "   1. S·ª≠ d·ª•ng API /api/workmanagement/tieu-chi-danh-gia ƒë·ªÉ xem ti√™u ch√≠"
    );
    console.log(
      "   2. S·ª≠ d·ª•ng API /api/workmanagement/chu-ky-danh-gia ƒë·ªÉ xem chu k·ª≥"
    );
    console.log("   3. T·∫°o ƒë√°nh gi√° KPI: POST /api/workmanagement/kpi");
    console.log();
  } catch (error) {
    console.error("‚ùå L·ªói seed d·ªØ li·ªáu:", error);
    throw error;
  }
};

// Main execution
const main = async () => {
  try {
    await connectDB();
    await seedData();

    console.log("üéâ Ho√†n t·∫•t!");
    process.exit(0);
  } catch (error) {
    console.error("‚ùå L·ªói:", error);
    process.exit(1);
  }
};

// Ch·∫°y script
if (require.main === module) {
  main();
}

module.exports = { seedData };
